const MIN_MERGE = 32;

// Helper function to sort small arrays using insertion sort
function insertionSort(arr, left, right) {
    for (let i = left + 1; i <= right; i++) {
        let temp = arr[i];
        let j = i - 1;
        while (j >= left && arr[j] > temp) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = temp;
    }
}

// Function to merge two sorted halves
function merge(arr, left, mid, right) {
    let len1 = mid - left + 1;
    let len2 = right - mid;
    let leftArr = new Array(len1);
    let rightArr = new Array(len2);

    for (let i = 0; i < len1; i++) {
        leftArr[i] = arr[left + i];
    }
    for (let i = 0; i < len2; i++) {
        rightArr[i] = arr[mid + 1 + i];
    }

    let i = 0, j = 0, k = left;
    while (i < len1 && j < len2) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k++] = leftArr[i++];
        } else {
            arr[k++] = rightArr[j++];
        }
    }

    while (i < len1) {
        arr[k++] = leftArr[i++];
    }

    while (j < len2) {
        arr[k++] = rightArr[j++];
    }
}

// Main Timsort function
function timSort(arr) {
    let n = arr.length;

    // Sort individual subarrays of size MIN_MERGE or smaller
    for (let i = 0; i < n; i += MIN_MERGE) {
        insertionSort(arr, i, Math.min(i + MIN_MERGE - 1, n - 1));
    }

    // Merge subarrays in a bottom-up manner
    for (let size = MIN_MERGE; size < n; size = 2 * size) {
        for (let left = 0; left < n; left += 2 * size) {
            let mid = left + size - 1;
            let right = Math.min(left + 2 * size - 1, n - 1);

            if (mid < right) {
                merge(arr, left, mid, right);
            }
        }
    }
}

// Example usage
let arr = [5, 21, 7, 23, 19];
timSort(arr);
console.log("Sorted array:", arr);
